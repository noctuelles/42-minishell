                       /* Minishell grammar */

<pipeline>			::=		<simple_command>
					  |		<pipeline>		'|'				<simple_command>

<simple_command>	::=		<cmd_prefix>	<word>			<cmd_suffix>
					  |		<cmd_prefix>	<word>
					  |		<cmd_prefix>
					  |		<word>			<cmd_suffix>
					  |		<word>

<cmd_prefix>		::=		<io_redirect>
					  |		<cmd_prefix>	<io_redirect>

<cmd_suffix>		::=		<io_redirect>
					  |		<cmd_suffix>	<io_redirect>
					  |		<word>
					  |		<cmd_suffix>	<word>

<io_redirect>		::=		'<'				<word>
					  |		'>'				<word>
					  |		'>>'			<word>
					  |		'<<'			<word>

/* For recursive descent parser (no minishell bonus) */

<command>			::=		'('		<simple_command>	')'
					  |		'('		<compound_command>	')'
					  |		<simple_command>

<compound_command>	::=		<command>			'||'		<compound_command>
					  |		<command>			'&&'		<compound_command>
					  |		<command>			'|'			<compound_command>
					  |		<command>

<simple_command>	::=		<io_list>	<word>			<cmd_suffix>
					  |		<io_list>	<word>
					  |		<io_list>
					  |		<word>			<cmd_suffix>
					  |		<word>

<io_list>			::=		<io_redirect>	<io_list>
					  |		<io_redirect>

<cmd_suffix>		::=		<io_list>		<cmd_suffix>
					  |		<io_list>
					  |		<word>			<cmd_suffix>
					  |		<word>

<io_redirect>		::=		'<'				<word>
					  |		'>'				<word>
					  |		'>>'			<word>
					  |		'<<'			<word>

/* For recursive descent parser (minishell bonuses) */

<and_or>			::=		<pipeline>		'&&'		<and_or>
					  |		<pipeline>		'||'		<and_or>
					  |		<pipeline>		'Îµ'

<command>			::=		<simple_command>
					  |		'('		<and_or>	')'

<pipeline>			::=		<command>	'|'			<pipeline>
					  |		<command>

<simple_command>	::=		<io_list>	<word>			<cmd_suffix>
					  |		<io_list>	<word>
					  |		<io_list>
					  |		<word>			<cmd_suffix>
					  |		<word>

<io_list>			::=		<io_redirect>	<io_list>
					  |		<io_redirect>

<cmd_suffix>		::=		<io_list>		<cmd_suffix>
					  |		<io_list>
					  |		<word>			<cmd_suffix>
					  |		<word>

<io_redirect>		::=		'<'				<word>
					  |		'>'				<word>
					  |		'>>'			<word>
					  |		'<<'			<word>

/* These production are not used in the parser : only here to describe what a word is */

<word>				::=		<letter>
							<word>					<letter>

<letter>			::=		'!'
					  | '#'
					  | '$'
					  | '%'
					  | '&'
					  | '*'
					  | '+'
					  | ','
					  | '-'
					  | '.'
					  | '/'
					  | '0'
					  | '1'
					  | '2'
					  | '3'
					  | '4'
					  | '5'
					  | '6'
					  | '7'
					  | '8'
					  | '9'
					  | ':'
					  | ';'
					  | '='
					  | '?'
					  | '@'
					  | 'A'
					  | 'B'
					  | 'C'
					  | 'D'
					  | 'E'
					  | 'F'
					  | 'G'
					  | 'H'
					  | 'I'
					  | 'J'
					  | 'K'
					  | 'L'
					  | 'M'
					  | 'N'
					  | 'O'
					  | 'P'
					  | 'Q'
					  | 'R'
					  | 'S'
					  | 'T'
					  | 'U'
					  | 'V'
					  | 'W'
					  | 'X'
					  | 'Y'
					  | 'Z'
					  | '['
					  | '\'
					  | ']'
					  | '^'
					  | '_'
					  | '`'
					  | 'a'
					  | 'b'
					  | 'c'
					  | 'd'
					  | 'e'
					  | 'f'
					  | 'g'
					  | 'h'
					  | 'i'
					  | 'j'
					  | 'k'
					  | 'l'
					  | 'm'
					  | 'n'
					  | 'o'
					  | 'p'
					  | 'q'
					  | 'r'
					  | 's'
					  | 't'
					  | 'u'
					  | 'v'
					  | 'w'
					  | 'x'
					  | 'y'
					  | 'z'
					  | '{'
					  | '}'
					  | '~'
